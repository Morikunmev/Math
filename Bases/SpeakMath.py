#Importaciones
import speech_recognition as sr #Biblioteca que proporciona la funcionaldiad de reconocmiento de voz, permitiendo convertir audio en texto
import keyboard #permite simular pulsaciones de teclas y enviar combinaciones de teclas al sistema
import pyautogui #Biblioteca para automatizar el control del amause y teclado
import time #funciones relacionadas con el tiempo, como pausas y esperas
import threading #permite ejecutar codigo en hilos paralelos, necesario para que el reconocimiento de voz funciones en segundo plano

# Variables globales para mantener un historial de lo dictado, se utiliza para la funcion "borra", que permite eliminar la ultima frase que se dicto
last_phrases = []

# Diccionario de s√≠mbolos matem√°ticos
math_symbols = {
    # Conjuntos num√©ricos
    "naturales": "‚Ñï",
    "enteros": "‚Ñ§",
    "racionales": "‚Ñö",
    "irracionales": "‚Ñù\\‚Ñö",
    "reales": "‚Ñù",
    "complejos": "‚ÑÇ",
    
    # Operaciones entre conjuntos
    "uni√≥n": "‚à™",
    "intersecci√≥n": "‚à©",
    "diferencia": "\\",
    "diferencia sim√©trica": "‚ñ≥",
    "complemento": "^c",
    "elevado":"^",
    "complen": "^",
    "comp": "^",
    "elev": "^",
    "producto cartesiano": "√ó",
    
    # Relaciones
    "pertenece": "‚àà",
    "no pertenece": "‚àâ",
    "contiene": "‚àã",
    "no contiene": "‚àå",
    "subconjunto": "‚äÇ",
    "subconjunto propio": "‚ää",
    "no es subconjunto": "‚äÑ",
    "superconjunto": "‚äÉ",
    "su conjunto": "‚äÉ",
    "superconjunto propio": "‚äã",
    "no es superconjunto": "‚äÖ",
    "subconjunto o igual": "‚äÜ",
    "superconjunto o igual": "‚äá",
    
    # Conjuntos especiales
    "conjunto vac√≠o": "‚àÖ",
    "vac√≠o": "‚àÖ",
    "conjunto potencia": "‚Ñò",
    "conjunto universal": "ùïå",
    
    # Cuantificadores y l√≥gica
    "para todo": "‚àÄ",
    "existe": "‚àÉ",
    "no existe": "‚àÑ",
    "tal que": "‚à£",
    "tal": "‚à£",
    "implica": "‚áí",
    "si y solo si": "‚áî",
    "si y s√≥lo si": "‚áî",  # Con acento en "s√≥lo"
    "si y solo s√≠": "‚áî",  # Con acento en "s√≠"
    "si y s√≥lo s√≠": "‚áî",  # Con ambos acentos
    "s√≠ y solo as√≠": "‚áî",
    "s√≠ y solo s√≠" :"‚áî",
    "s√≠ y solo": "‚áî",
    's√≠ solo s√≠': "‚áî",
    "sii": "‚áî",           # Abreviatura com√∫n
    
    "negaci√≥n": "¬¨",
    "y l√≥gico": "‚àß",
    "o l√≥gico": "‚à®",
    
    # Otros s√≠mbolos √∫tiles
    "infinito": "‚àû",
    "por lo tanto": "‚à¥",
    "porque": "‚àµ",
    "pi": "œÄ",
    "ra√≠z": "‚àö",
    
    "no igual": "‚â†",
    "distinto": "‚â†",
    "distinto de": "‚â†",
    
    "igual": "=",
    "igual a": "=",
    "tal que": "‚à£",
    "donde": "‚à£",
    "dos puntos formal": ":",
    
    "implica": "‚áí",
    "implicaci√≥n": "‚üπ",
    "entonces": "‚üπ",
    "si entonces": "‚üπ",
    
    "flecha": "‚Üí",
    "flecha derecha": "‚Üí",
    "flecha a la derecha": "‚Üí",
    "hacia la derecha": "‚Üí",
    
    "flecha izquierda": "‚Üê",
    "flecha arriba": "‚Üë",
    "flecha abajo": "‚Üì",
    "flecha doble": "‚Üî",
    
    "al cuadrado": "¬≤",
    "cuadrado": "¬≤"
}

#Funcion de Reconocimiento de Voz
def voice_recognition():
    global last_phrases
    r = sr.Recognizer() #crea un objeto Recognizer para procesar el audio
    
    print("Iniciando reconocimiento de voz...")
    
    #mantiene el programa continuamente escuchando
    while True:
        with sr.Microphone() as source: #abre el microfono predeterminado del sistema como fuente de audio. El bloque with asegura que el microfono se cierre correctamente despues de su uso.
            print("Escuchando...")
            r.adjust_for_ambient_noise(source) #Ajusta automaticamente el nivel de energia del reconocedor para compensar el ruido ambiental
            audio = r.listen(source) #Escucha a traves del microfono que detecta hasta que detecta una pausa en el habla y guarda el audio capturado. 
            
            try:
                text = r.recognize_google(audio, language="es-ES")
                #Envia el audio al servicio de reconocmiento de voz de Google y recibe el texto reconocido. Especifica el idiom
                print(f"Has dicho: '{text}'")
                print(f"Texto en min√∫sculas: '{text.lower()}'")  # Muestra exactamente lo que se est√° procesando

                
                # Peque√±o retraso para asegurar que se procese toda la frase
                time.sleep(0.2)
                texto_lower = text.lower()
                
                # Verificar comandos espec√≠ficos primero
                if "vi√±eta" in texto_lower:
                    print("Activando vi√±etas...")
                    keyboard.press_and_release('alt+h')
                    time.sleep(0.1)
                    keyboard.press_and_release('u')
                
                elif "abre par√©ntesis" in texto_lower:
                    keyboard.write("(")
                
                elif "cierra par√©ntesis" in texto_lower:
                    keyboard.write(")")
                
                elif "abre llave" in texto_lower:
                    keyboard.write("{")
                
                elif "cierra llave" in texto_lower:
                    keyboard.write("}")
                
                elif texto_lower == "punto":
                    keyboard.write(".")
                
                elif texto_lower == "dos puntos":
                    # Escribir dos puntos
                    keyboard.write(":")
                    # Esperar un tiempo m√°s largo antes de desactivar la negrita
                    time.sleep(0.5)  # Aumentado a 0.5 segundos
                    # Desactivar negrita con una secuencia m√°s expl√≠cita
                    keyboard.press('ctrl')
                    time.sleep(0.2)
                    keyboard.press('n')
                    time.sleep(0.2)
                    keyboard.release('n')
                    time.sleep(0.2)
                    keyboard.release('ctrl')
                
                elif "desactivar negrita" in texto_lower or "quitar negrita" in texto_lower:
                    print("Desactivando negrita...")
                    keyboard.press('ctrl')
                    time.sleep(0.2)
                    keyboard.press('n')
                    time.sleep(0.2)
                    keyboard.release('n')
                    time.sleep(0.2)
                    keyboard.release('ctrl')
                
                elif "borra" in texto_lower:
                    if last_phrases:
                        last_phrase = last_phrases.pop()
                        print(f"Borrando: '{last_phrase}'")
                        for _ in range(len(last_phrase) + 1):
                            keyboard.press_and_release('backspace')
                    else:
                        print("No hay frases para borrar")
                
                else:
                    # Buscar coincidencias ordenando las palabras clave por longitud (de m√°s larga a m√°s corta)
                    matched = False
                    # Convertir el diccionario a una lista y ordenar por longitud de la palabra clave
                    sorted_symbols = sorted(math_symbols.items(), key=lambda x: len(x[0]), reverse=True)
                    
                    for keyword, symbol in sorted_symbols:
                        if keyword in texto_lower:
                            print(f"¬°Palabra clave '{keyword}' detectada! Insertando s√≠mbolo: {symbol}")
                            keyboard.write(symbol)
                            matched = True
                            break
                    
                    # Si no hay coincidencia, escribir el texto normal
                    if not matched:
                        last_phrases.append(text)
                        keyboard.write(text + " ")
                        
                        # Verificar si el texto termina con dos puntos
                        if text.strip().endswith(":"):
                            print("Detectados dos puntos: desactivando negrita...")
                            time.sleep(0.5)  # Aumentado a 0.5 segundos
                            keyboard.press('ctrl')
                            time.sleep(0.2)
                            keyboard.press('n')
                            time.sleep(0.2)
                            keyboard.release('n')
                            time.sleep(0.2)
                            keyboard.release('ctrl')
                
            except sr.UnknownValueError:
                print("No se pudo entender el audio")
            except sr.RequestError as e:
                print(f"Error en la solicitud a Google Speech Recognition; {e}")

# Iniciar reconocimiento de voz en un hilo separado
thread = threading.Thread(target=voice_recognition)
thread.daemon = True
thread.start()

# Mantener el programa en ejecuci√≥n hasta que se presione Esc
print("Reconocimiento de voz activado con los siguientes comandos:")
print("- Di 'vi√±eta' para insertar una vi√±eta")
print("- Di 'abre par√©ntesis' para insertar (")
print("- Di 'cierra par√©ntesis' para insertar )")
print("- Di 'abre llave' para insertar {")
print("- Di 'cierra llave' para insertar }")
print("- Di 'punto' para insertar .")
print("- Di 'dos puntos' para insertar : y desactivar negrita")
print("- Di 'desactivar negrita' o 'quitar negrita' para desactivar formato de negrita")
print("- Di 'borra' para borrar la √∫ltima frase")
print("- Para insertar s√≠mbolos matem√°ticos, solo menciona nombres como:")
print("  - 'naturales' para ‚Ñï")
print("  - 'enteros' para ‚Ñ§")
print("  - 'racionales' para ‚Ñö")
print("  - 'reales' para ‚Ñù")
print("  - 'complejos' para ‚ÑÇ")
print("  - 'pertenece' para ‚àà")
print("  - 'no pertenece' para ‚àâ")
print("  - 'para todo' para ‚àÄ")
print("  - 'existe' para ‚àÉ")
print("  - 'subconjunto' para ‚äÇ")
print("  - 'subconjunto o igual' para ‚äÜ")
print("  - 'conjunto vac√≠o' para ‚àÖ")
print("  - ... y muchos otros s√≠mbolos matem√°ticos")
print("Presiona Esc para salir.")
keyboard.wait('esc')